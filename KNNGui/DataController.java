package KNNGui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JButton;
import knnModel.MLTuple;
/**
 * Author: Rajat Bansal and Shounak Amladi
 * 
 * */ 
public class DataController implements ActionListener {

	KNNView view;
	MLTuple temp;
	public DataController(KNNView knnView) {
		view = knnView; 
		
	}
/**
 * Process action event generated by the view, responsible for adding tuple into the specified testing tuple or training tuple
 * @param e ActionEvent that must be processed
 * */
	@Override
	public void actionPerformed(ActionEvent e) {
		JButton addBtn = view.getAddBtn();
		JButton testingBtn = view.getBtnPredictTuple();
		
		ArrayList<FeatureView> featureList = view.getFeatureList();
		boolean isValue = false;
		boolean isFeatureValue = true;
	
		if(e.getSource() == addBtn) {
			temp = new MLTuple(view.getTrainingUid());
			for(FeatureView f: featureList) {
				isValue |= f.isValue();
				isFeatureValue &= f.isFeatureValue();
			}
			if(isValue && isFeatureValue) {
				for(FeatureView f: featureList) {
					temp.addAttributes(f.getController().getFeature());
					f.resetView();
				}
				view.addTrainingTuple(temp);
				view.testOrTrainIsPressed();
			}
			else {	
				view.showErrorMsg(0);
			}
		}	
		
		else if(e.getSource() == testingBtn) {
			temp = new MLTuple(view.getTestingUid());
			for(FeatureView f: featureList) {
				isValue |= f.isValue();
			}
			if(isValue) {
				for(FeatureView f: featureList) {
					temp.addAttributes(f.getController().getFeature());
					f.resetView();
				}
				view.addTestingTuple(temp);
				view.testOrTrainIsPressed();
			}
			else {	
				view.showErrorMsg(0);
			}
		}
	}
}
