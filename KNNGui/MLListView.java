package KNNGui;

import java.util.ArrayList;
import java.util.Vector;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;

import knnModel.*;
import predictionStrategy.MLListPredictAvg;
import predictionStrategy.predictStrategy;
import java.awt.*;

/**
 * @author
 * This class holds the panel where the user can see what features they added and enter in values they wish to put
 * into either the test tuples or the training tuples
 * */
public class MLListView extends FeatureView{

  private FeatureView pnlFeature;
  private JComboBox cmbViews;
  private JButton btnAddtoList;
  private JPanel pnlAddViews;
  private Vector<FeatureView> listofViews;
  private ListController contr;
  private JFrame myFrame;
  private ArrayList<FeatureView> featurePanelList;
 
  public MLListView(JFrame frame){
    super();
    featurePanelList = new ArrayList<FeatureView>();
    myFrame = frame;
    contr = new ListController(frame);
    listofViews = new Vector<FeatureView>();
    listofViews.add(new MLStringView(myFrame));
    listofViews.add(new MLNumberView((KNNView)myFrame));
    listofViews.add(this);
    cmbViews = new JComboBox<FeatureView>(listofViews);
    cmbViews.setToolTipText("Pick Feature Type");
    pnlAddViews = new JPanel();
    btnAddtoList = new JButton("Add to List");
    btnAddtoList.addActionListener(contr);
    closeButton.addActionListener(contr);

    pnlAddViews.add(btnAddtoList);
    pnlAddViews.add(cmbViews);
    pnlSubNorth.add(pnlAddViews, BorderLayout.PAGE_END);
    this.setBorder(new EmptyBorder(20,10,20,10));
  }
  /**
   * toString to get the name of the view
   * @return String representation of feature name
   * */
  @Override
public String toString(){
	  if(txtViewName.getText().equals("")) {
			return "List";
		}
		return txtViewName.getText();
  }
  /**
   * clones the current list pane and makes a new one
   * @return f FeatureView that is cloned
   * */
  @Override
public FeatureView clonePane(){
    return new MLListView(myFrame);
  }
  /**
   * gets the controller for this view
   * @return contr FeatureController 
   * */
  @Override
  public FeatureController getController() {

  	return contr;
  }
  /**
   * resets the current view
   * */
  @Override
public void resetView() {
	  featureValue = null;
  }
  
  @Override
  public boolean isValue() {
	 if(featureValue == null) {
		 return false;
	}
	 return true;
  }
  @Override
  public predictStrategy getStrategy() {
		return new MLListPredictAvg();
  }
  
  @Override
  public void lockInput(boolean lock) {
	  cmbViews.setEnabled(lock);
	  btnAddtoList.setEnabled(lock);
  }
  
  /**
   * This controller is responsible for processing the action event generated by the MLList view
   * */
  
  private class ListController implements FeatureController{
      private JDialog tempFrame;
      private Feature list;
      private JFrame frame;
      private FeatureView tempPane;
      private ListController(JFrame mainFrame){

    	  	featureValue = new MLFeatureComplex(txtViewName.getText());
    	  	frame = mainFrame;
      }
      @Override
	public void actionPerformed(ActionEvent e){
    	  
          if (e.getSource()==btnAddtoList){
        	  
        	  if(txtViewName.getText().equals("")) {
        		  JOptionPane.showMessageDialog(null, "Please enter name");
        	  } else {
        		  if (((KNNView)frame).getTestOrTrainIsPressed()) {
        			  ((KNNView)frame).testOrTrainIsPressed();
        			  featureValue = new MLFeatureComplex(txtViewName.getText());
        		  }
	              FeatureView temp = (FeatureView)cmbViews.getSelectedItem();
	              tempFrame = new JDialog(frame, Dialog.ModalityType.APPLICATION_MODAL);
	              tempPane = temp.clonePane();
	              featurePanelList.add(tempPane);
	              tempFrame.add(tempPane);
	              tempFrame.pack();
	              tempFrame.setTitle(txtViewName.getText());
	              tempFrame.setVisible(true);
	              ((MLFeatureComplex)featureValue).addFeature(tempPane.getController().getFeature());
        	  }
          }
          else if(e.getSource() == closeButton) {
  			((KNNView)frame).removeToScrollPane(MLListView.this);	
  		}
      }
	@Override
	public Feature getFeature() {
		return featureValue;
	}
  }
  public static void main(String[] args) {
    JFrame jf = new JFrame();
    MLListView m = new MLListView(jf);
    jf.add(m);
    jf.pack();
    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    jf.setVisible(true);

  }

}
